from os import rename

def indxf (dxf_name):
    new = Param = Value = ''
    
    if dxf_name[-4:] != '.dxf' :
        dxf_name += '.dxf'
    dxf = open (dxf_name, 'r')
    # Файл открыт и готов к считыванию
    
    Allowed_objects = {'_INIT_':    (' 0', ' 8'),       # Имя и слой каждого объекта
                       'POLYLINE':  ('40', '41',        # Начальная и конечная ширина линии
                                     '66', '70'),       # Флаг примитивов и замкнутость линии
                       'SOLID':     ('10', '20', '30',  # Координаты первой вершины
                                     '11', '21', '31',  # Координаты второй вершины
                                     '12', '22', '32',  # Координаты третьей вершины
                                     '13', '23', '33'), # Координаты четвёртой вершины
                       'VERTEX':    ('10', '20', '30',  # Координаты точки
                                     '42'),             # Выпуклость линии
                       'LINE':      ('10', '20', '30',  # Координаты начала отрезка
                                     '11', '21', '31'), # Координаты конца  отрезка
                       'ARC':       ('10', '20', '30',  # Координаты центра дуги
                                     '40', '50', '51'), # Радиус, начальный и конечный углы дуги
                       'CIRCLE':    ('10', '20', '30',  # Координаты центра
                                     '40'),             # Радиус окружности
                       'SEQEND':    ()}                 # Объект окончания полилинии
    
    while not (Param == '  2\n' and Value == 'ENTITIES\n'):
        Param = dxf.readline()
        Value = dxf.readline()
        # Если не начался раздел ENTITIES, файл просто просматривается
        
    else :
        new += '  0\n'+'SECTION\n'+'  2\n'+'ENTITIES\n'
        # Если же раздел ENTITIES начался, сразу же записывается его заголовок
        
        Param = dxf.readline()
        Value = dxf.readline() 
        # После записи считывается следующая пара параметр-значение, чтобы было с чем работать
        
        inObject = ''
        while not (Param == '  0\n' and Value == 'ENDSEC\n'):
            # Цикл работает до тех пор, пока не закончится раздел
            if Param == '  0\n':        # Если встречается код 0, значит, начался объект,
                inObject = Value[:-1]   # и требуется определить и сохранить тип объекта
            if (inObject in Allowed_objects and
                (Param[1:-1] in Allowed_objects['_INIT_'] or
                 Param[1:-1] in Allowed_objects[inObject])):
                # Если параметр принадлежит правильному объекту
                # Если это правильный параметр для этого объекта
                # В таком случае пара параметр-значение записывается
                if Param[1:-1] in ('30', '31', '32', '33'):
                    new += Param + '0.0/n'
                    # Все значения по координате Z обнуляются
                else:
                    new += Param + Value
                
            Param = dxf.readline()
            Value = dxf.readline()
            # Новая пара параметр-значение считывается в конце итерации цикла, пока ещё в ENTITIES
        else:
            # Раздел кончился, можно расслабиться и завершить данные
            new += '  0\n'+'ENDSEC\n'+'  0\n'+'EOF\n'
            
    dxf.close()
    rename (dxf_name, dxf_name+'.bak')
    # После закрытия считываемого файла, к его расширению добавляется .bak
    # Так как имя исходного файла сменилось, создаётся новый файл с исходным именем

    dxf = open (dxf_name, 'w')    
    dxf.write(new)
    dxf.close()
    print ('Done!')
    # Запись в файл завершена, файлы закрыты, процедура завершена. EOF

exit_code = ('exit', 'quit', 'конец', 'выход')
while True:
    code = input("Введите имя DXF-файла для обработки: ")
    if code in exit_code: break
    indxf (code)
